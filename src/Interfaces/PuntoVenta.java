/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import DAO.RepositoryCliente;
import DAO.RepositoryProductos;
import DAO.RepositoryVentas;
import Entidades.Clientes;
import Entidades.Productos;
import Entidades.Rel_ProductosVentas;
import Entidades.Ventas;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Arturo Cervantes 207003
 */
public class PuntoVenta extends javax.swing.JFrame implements Runnable {

    DateFormat Formato = new SimpleDateFormat("yyyy-MM-dd");
    Date date = new Date();
    Calendar cal = Calendar.getInstance();
    DefaultTableModel modelotabla;
    RepositoryProductos rp1 = new RepositoryProductos();
    float Subtotal = 0;
    float total = 0;
    String hora, minuto, segundos;
    Thread hilo;
    String horaExacta;
    String Fechaexacta = Formato.format(date);

    /**
     * Creates new form PuntoVenta
     */
    public PuntoVenta() {

        initComponents();
        tablaPVenta();
        PanelFecha.setText(" " + Fechaexacta);
        hilo = new Thread(this);
        hilo.start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        clientecombo = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        IDProducto = new javax.swing.JTextField();
        CantidadSpinner = new javax.swing.JSpinner();
        RegistroLista = new javax.swing.JButton();
        PanelFecha = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        HoraPanel = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        EliminarRegistro = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        TotalTabla = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaBusqueda = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        descuento = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaseleccionado = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        subtotal = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID Producto", "Nombre", "Precio Actual", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setText("Cliente:");

        clientecombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientecomboActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setText("Producto:");

        IDProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDProductoActionPerformed(evt);
            }
        });

        RegistroLista.setText("Save");
        RegistroLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegistroListaActionPerformed(evt);
            }
        });

        PanelFecha.setEditable(false);
        PanelFecha.setBackground(new java.awt.Color(255, 204, 204));
        PanelFecha.setFont(new java.awt.Font("Verdana", 1, 16)); // NOI18N
        PanelFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PanelFechaActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Fecha: ");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setText("Hora:");

        HoraPanel.setEditable(false);
        HoraPanel.setBackground(new java.awt.Color(255, 204, 204));
        HoraPanel.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        HoraPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HoraPanelActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Total: ");

        EliminarRegistro.setText("Cancelar Registo");
        EliminarRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarRegistroActionPerformed(evt);
            }
        });

        jButton3.setText("Guardar Venta");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        TotalTabla.setEditable(false);
        TotalTabla.setBackground(new java.awt.Color(255, 204, 204));
        TotalTabla.setFont(new java.awt.Font("Tahoma", 0, 23)); // NOI18N
        TotalTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TotalTablaActionPerformed(evt);
            }
        });

        tablaBusqueda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Producto", "Nombre", "Precio Actual", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaBusqueda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaBusquedaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaBusqueda);
        if (tablaBusqueda.getColumnModel().getColumnCount() > 0) {
            tablaBusqueda.getColumnModel().getColumn(3).setHeaderValue("Stock");
        }

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setText("Descuento:");

        descuento.setBackground(new java.awt.Color(255, 204, 204));
        descuento.setFont(new java.awt.Font("Tahoma", 0, 23)); // NOI18N
        descuento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descuentoActionPerformed(evt);
            }
        });
        descuento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                descuentoKeyPressed(evt);
            }
        });

        tablaseleccionado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Producto", "Nombre", "Precio Actual", "Cantidad", "Monto Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Integer.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tablaseleccionado);

        jButton1.setText("Salir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 102));

        jLabel7.setFont(new java.awt.Font("MS UI Gothic", 1, 36)); // NOI18N
        jLabel7.setText("Puesto de Venta");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel8.setText("SubTotal:");

        subtotal.setEditable(false);
        subtotal.setBackground(new java.awt.Color(255, 204, 204));
        subtotal.setFont(new java.awt.Font("Tahoma", 0, 23)); // NOI18N
        subtotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtotalActionPerformed(evt);
            }
        });

        jButton4.setText("Actualizar Valor Total");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clientecombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(IDProducto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CantidadSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RegistroLista, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(227, 227, 227)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(10, 10, 10)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(HoraPanel)
                                    .addComponent(PanelFecha, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(descuento)
                                    .addComponent(TotalTabla, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(subtotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)))
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(EliminarRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PanelFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(HoraPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clientecombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(IDProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CantidadSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RegistroLista))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subtotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(descuento, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(TotalTabla, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(EliminarRegistro))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(7, 7, 7))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clientecomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientecomboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_clientecomboActionPerformed

    private void RegistroListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegistroListaActionPerformed

        DefaultTableModel modeloBusqueda = (DefaultTableModel) tablaBusqueda.getModel();
        //Se obtiene el tamaño de la tabla
        int index[] = tablaBusqueda.getSelectedRows();
        try {
            try {
                //El tamaño de la extension de la tabla
                Object[] rows = new Object[5];
                int IDp = Integer.parseInt(IDProducto.getText());

                RepositoryProductos rc = new RepositoryProductos();
                //Se consulta al producto
                Productos pi = rc.consultarPorID(IDp);

                //Se comprueba si es un valor numerico
                if (isNumeric(IDProducto.getText()) == true) {
                    if ((Integer) CantidadSpinner.getValue() > 0) {
                        float Descuento = 0;
                        //Se hacen las operaciones finales
                        Subtotal = Subtotal + (pi.getPrecioactual() * (Integer) CantidadSpinner.getValue());
                        total = Subtotal - Descuento;
                        //Dependiendo el tamaño de la tabla, los valores seleccionados pasaran de una tabla a otra, haciendo la operacion a tiempo real
                    } else {
                        JOptionPane.showMessageDialog(null, "Se debe de elegir mas de 0 cantidades de productos.");
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Formato incorrecto. Favor de agregar un ID valido.");
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Campo vacio. Favor de agregar un ID de producto.");
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Producto no encontrado.");
        }

    }//GEN-LAST:event_RegistroListaActionPerformed

    private void PanelFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PanelFechaActionPerformed

    }//GEN-LAST:event_PanelFechaActionPerformed

    private void HoraPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HoraPanelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_HoraPanelActionPerformed

    private void EliminarRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarRegistroActionPerformed
        DefaultTableModel tablados = (DefaultTableModel) tablaseleccionado.getModel();
        int confirm = JOptionPane.showConfirmDialog(null, "¿Esta seguro de cancelar esta venta?", "Aceptar", JOptionPane.YES_NO_OPTION);
        //Si se confirma la eliminación
        if (confirm == JOptionPane.YES_OPTION) {
            int a = tablados.getRowCount() - 1;

            for (int i = a; i >= 0; i--) {
                tablados.removeRow(tablados.getRowCount() - 1);
            }
            total = 0;
            Subtotal = 0;
            subtotal.setText("");
            TotalTabla.setText("");
        }

    }//GEN-LAST:event_EliminarRegistroActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        try {
            try {
                //Se obtiene la fecha exacta junto con su formato
                String fechatotal = Fechaexacta + " " + horaExacta;
                Date date1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(fechatotal);

                float Descuento = Float.parseFloat(descuento.getText());

                //Se hace la operacion del monto final
                float montofinal = Float.parseFloat(TotalTabla.getText()) - Descuento;
                if (montofinal >= 0) {
                    RepositoryCliente rc = new RepositoryCliente();
                    //Se consulta al cliente para adjuntar la venta
                    Clientes cliente = rc.consultarPorID(BusquedaComboCliente());

                    RepositoryVentas rpv = new RepositoryVentas();
                    Ventas v1 = new Ventas(date1, Descuento, montofinal, cliente);

                    //SSe agrega a la venta la relación creada
                    v1.agregarVentas(AgregarRelacionventa(v1, (Integer) CantidadSpinner.getValue()));
                    rpv.Crear(v1);

                    JOptionPane.showMessageDialog(null, "Venta realizada!");

                    //Se eliminan los contenidos de la tabla
                    int a = modelotabla.getRowCount() - 1;
                    for (int i = a; i >= 0; i--) {
                        modelotabla.removeRow(modelotabla.getRowCount() - 1);
                    }
                    total = 0;
                    Subtotal = 0;
                    subtotal.setText(null);
                    descuento.setText(null);
                    TotalTabla.setText(null);
                } else {
                    JOptionPane.showMessageDialog(null, "El descuento aplicado no es valido.");
                }

            } catch (ParseException ex) {
                Logger.getLogger(PuntoVenta.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Formato de descuento incorrecto. Favor de agregar un precio valido.");
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void TotalTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TotalTablaActionPerformed

    }//GEN-LAST:event_TotalTablaActionPerformed

    private void descuentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descuentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descuentoActionPerformed

    private void IDProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDProductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDProductoActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tablaBusquedaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaBusquedaMouseClicked
        IDProducto.setText("");
        DefaultTableModel model = (DefaultTableModel) tablaBusqueda.getModel();
        int selectedRowIndex = tablaBusqueda.getSelectedRow();
        //Si  es vacio, obtendra el valor del ID del producto
        if (IDProducto.getText().isEmpty()) {
            IDProducto.setText(model.getValueAt(selectedRowIndex, 0).toString());
        } else {

        }
    }//GEN-LAST:event_tablaBusquedaMouseClicked

    private void subtotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subtotalActionPerformed

    private void descuentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descuentoKeyPressed


    }//GEN-LAST:event_descuentoKeyPressed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            //Si el descuento no esta vacio, se hacen las operaciones
            if (!descuento.getText().equals("")) {
                float Descuento = Float.parseFloat(descuento.getText());

                total = Subtotal - Descuento;
                TotalTabla.setText(String.valueOf(total));
            } //Si se introduce un formato erroneo o nada. se le pedira de nuevo que introdusca los datos
            else {
                JOptionPane.showMessageDialog(null, "No se agrego ningun descuento.");
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Valor invalido. Agregue numeros.");
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    /**
     * Busca al producto,y regresa el ID de este
     *
     * @return idCliente
     */
    public int BusquedaComboProducto() {

        RepositoryProductos rc = new RepositoryProductos();

        int Producto = 0;
        List<Productos> Categoria = rc.consultarTodos();
        for (Productos categorias : Categoria) {
            if (categorias.getNombre().equals(clientecombo.getSelectedItem())) {
                Producto = categorias.getId();
            } else {

            }

        }
        return Producto;
    }

    /**
     * Busca al cliente,y regresa el ID de este
     *
     * @return idCliente
     */
    public int BusquedaComboCliente() {
        RepositoryCliente rc = new RepositoryCliente();
        int idCliente = 0;
        List<Clientes> Categoria = rc.consultarTodos();
        for (Clientes categorias : Categoria) {
            if (categorias.getNombre().equals(clientecombo.getSelectedItem())) {
                idCliente = categorias.getId();
            } else {

            }

        }

        return idCliente;

    }

    /**
     * Comprueba si el valor es un numero o no
     *
     * @param cadena
     * @return
     */
    private static boolean isNumeric(String cadena) {
        try {
            Integer.parseInt(cadena);
            return true;
        } catch (NumberFormatException nfe) {
            return false;
        }

    }

    /**
     * Agrega los productos a la tabla de productos
     */
    public void tablaPVenta() {
        DefaultTableModel tm = (DefaultTableModel) tablaBusqueda.getModel();
        tm.getDataVector().removeAllElements();
        RepositoryProductos rp1 = new RepositoryProductos();
        List<Productos> prod = rp1.consultarTodos();
        ClientesBox();
        for (Productos producto : prod) {
            Object row[] = {producto.getId(), producto.getNombre(), producto.getPrecioactual()};
            tm.addRow(row);
        }

    }

    /**
     * Obtiene la hora exacta en la que se hace la operacion
     */
    public void Hora() {

        Calendar calendario = new GregorianCalendar();
        Date horaactual = new Date();
        calendario.setTime(horaactual);
        hora = calendario.get(Calendar.HOUR_OF_DAY) > 9 ? "" + calendario.get(Calendar.HOUR_OF_DAY) : "0" + calendario.get(Calendar.HOUR_OF_DAY);
        minuto = calendario.get(Calendar.MINUTE) > 9 ? "" + calendario.get(Calendar.MINUTE) : "0" + calendario.get(Calendar.MINUTE);
        segundos = calendario.get(Calendar.SECOND) > 9 ? "" + calendario.get(Calendar.SECOND) : "0" + calendario.get(Calendar.SECOND);

    }

    /**
     * Ejecuta el hilo de la hora
     */
    public void run() {
        Thread current = Thread.currentThread();
        while (current == hilo) {
            Hora();
            HoraPanel.setText(hora + ":" + minuto + ":" + segundos);
            horaExacta = hora + ":" + minuto + ":" + segundos;
        }

    }

    /**
     * Llena el ComboBox con los nombres de los clientes
     */
    public void ClientesBox() {
        RepositoryCliente rp1 = new RepositoryCliente();
        List<Clientes> proveedor = rp1.consultarTodos();
        for (Clientes cliente : proveedor) {
            clientecombo.addItem(cliente.getNombre());
        }
    }

    /**
     * Crea una relacion por medio de la venta que se registrara en la
     * transaccion
     *
     * @param venta
     * @param cantidad
     * @return Relacion venta
     */
    public Rel_ProductosVentas AgregarRelacionventa(Ventas venta, int cantidad) {
        Rel_ProductosVentas rv = null;

        //Se busca primero el ID del producto
        for (int i = 0; i < tablaseleccionado.getRowCount(); i++) {
            RepositoryProductos rc = new RepositoryProductos();
            int idProducto = 0;
            List<Productos> product = rc.consultarTodos();
            for (Productos productos : product) {
                if (productos.getId() == Integer.parseInt(tablaseleccionado.getModel().getValueAt(i, 0).toString())) {
                    idProducto = productos.getId();
                } else {
                }
            }
        }
        return rv;

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PuntoVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PuntoVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PuntoVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PuntoVenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PuntoVenta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner CantidadSpinner;
    private javax.swing.JButton EliminarRegistro;
    private javax.swing.JTextField HoraPanel;
    private javax.swing.JTextField IDProducto;
    private javax.swing.JTextField PanelFecha;
    private javax.swing.JButton RegistroLista;
    private static javax.swing.JTextField TotalTabla;
    private javax.swing.JComboBox<String> clientecombo;
    private static javax.swing.JTextField descuento;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private static javax.swing.JTextField subtotal;
    private javax.swing.JTable tablaBusqueda;
    private javax.swing.JTable tablaseleccionado;
    // End of variables declaration//GEN-END:variables
}
